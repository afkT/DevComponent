// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: rootProject.file('file/gradle/config.gradle')

buildscript {

    // Kotlin 版本
    ext.kotlin_version = "1.4.31"
    ext.kotlin_stdlib = "1.4.31"

    repositories { // 该 repositories 用于 buildscript dependencies 插件、脚本依赖加载
        // AliRepo 阿里仓库服务 https://maven.aliyun.com/mvn/view
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }

        google()

        // jitpack maven
        maven { url 'https://jitpack.io' }

        maven { url 'https://plugins.gradle.org/m2' }

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0'
        // kotlin https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-gradle-plugin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // Hilt 依赖注入
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.28-alpha'
        // 美团多渠道打包
        classpath 'com.meituan.android.walle:plugin:1.1.7'
        // ARouter AutoRegister
        classpath "com.alibaba:arouter-register:1.0.2"
    }
}

allprojects {
    repositories { // 该 repositories 用于 app、module dependencies 第三方库 implementation 等依赖加载
        google()

        // jitpack maven
        maven { url 'https://jitpack.io' }

        maven { url 'https://plugins.gradle.org/m2' }

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

        configurations.all {
            // 强制统一版本 => 可通过 file/json/deps.gradle 获取, 视情况选择
            resolutionStrategy.force(

                    // = kotlin =

                    // stdlib
                    "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_stdlib}",
                    // core
                    "androidx.core:core-ktx:1.3.2",
                    // coroutines
                    "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3",
                    // lifecycle_runtime
                    "androidx.lifecycle:lifecycle-runtime-ktx:2.3.0",
                    // lifecycle_viewmodel
                    "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0",
                    // lifecycle_livedata
                    "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0",
                    // lifecycle_viewmodel_savedstate
                    "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.0",
                    // lifecycle_common_java8
                    "androidx.lifecycle:lifecycle-common-java8:2.3.0",
                    // room_runtime
                    "androidx.room:room-runtime:2.2.6",
                    // room_compiler
                    "androidx.room:room-compiler:2.2.6",
                    // room_ktx
                    "androidx.room:room-ktx:2.2.6",
                    // work_runtime_ktx
                    "androidx.work:work-runtime-ktx:2.5.0",
                    // work_runtime
                    "androidx.work:work-runtime:2.5.0",
                    // datastore_preferences
                    "androidx.datastore:datastore-preferences:1.0.0-alpha06",
                    // fragment_ktx
                    "androidx.fragment:fragment-ktx:1.3.0",
                    // activity_ktx
                    "androidx.activity:activity-ktx:1.2.0",

                    // = androidx =

                    // appcompat
                    "androidx.appcompat:appcompat:1.2.0",
                    // appcompat_resources
                    "androidx.appcompat:appcompat-resources:1.2.0",
                    // cardview
                    "androidx.cardview:cardview:1.0.0",
                    // recyclerview
                    "androidx.recyclerview:recyclerview:1.1.0",
                    // multidex
                    "androidx.multidex:multidex:2.0.1",
                    // constraint_layout
                    "androidx.constraintlayout:constraintlayout:2.0.4",
                    // viewpager2
                    "androidx.viewpager2:viewpager2:1.0.0",
                    // sqlite
                    "androidx.sqlite:sqlite:2.1.0",
                    // design
                    "com.google.android.material:material:1.3.0",
                    // fragment
                    "androidx.fragment:fragment:1.3.0",
                    // flexbox
                    "com.google.android:flexbox:2.0.1",
                    // hilt_android
                    "com.google.dagger:hilt-android:2.28-alpha",
                    // hilt_android_compiler
                    "com.google.dagger:hilt-android-compiler:2.28-alpha",
                    // startup
                    "androidx.startup:startup-runtime:1.0.0",
            )
        }
    }

//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//        }
//    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 全局编码设置
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// =================
// = config.gradle =
// =================

import groovy.json.JsonOutput

// 存储 config.gradle json 数据
task saveConfigGradleJSON() {
//    println deps.toString()
    // 获取 ext.deps json 数据
    def depsJSON = JsonOutput.toJson(deps)
    // 格式化 JSON
    def formatJSON = JsonOutput.prettyPrint(depsJSON)
    // 写入 ext.deps 配置信息
    def file = new File(rootDir, "file/json/deps.json")
    file.withPrintWriter { it.print(formatJSON) }
}

// 生成 deps dependencies gradle
task generateDepsDependencies() {
    def newline = System.getProperty("line.separator")
    def newline2 = newline + newline
    def importSymbol = "implementation"
    // 拼接 string
    def builder = new StringBuilder()
    builder.append("dependencies {")
    for (String module : deps.keySet()) {
        builder.append("${newline2}\t// = ${module} =${newline}")
        // 循环拼接处理
        def valueMaps = deps.get(module) as LinkedHashMap<String, String>
        for (String name : valueMaps.keySet()) {
            def value = valueMaps.get(name)
            builder.append("${newline}\t// ${name}")
            builder.append("${newline}\t${importSymbol} '${value}'")
        }
    }
    builder.append("${newline}}")
    // 写入 ext.deps 配置信息
    def file = new File(rootDir, "file/json/deps_gradle") // deps.gradle 防止每次生成显示 gradle sync
    file.withPrintWriter { it.print(builder.toString()) }

    // 写入 deps force config copy 记事本
    def forceFile = new File(rootDir, "file/json/deps_force.txt")
    forceFile.withPrintWriter {
        def txt = builder.toString()
        txt = txt.replaceAll("implementation ", "")
        txt = txt.replaceAll("'", "\",").replaceAll("\t\",", "\t\"")
        it.print(txt)
    }
}